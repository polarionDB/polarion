// List of operators

// Plus (+)
dump 2 + 3

// Sub (-)
dump 2 - 3

// Multiply (*)
dump 2 * 3

// Divide (/) - It's actually floor division, since floats don't exist in ice1h
dump 2 / 3 // Dumps 0
dump 3 / 2 // Dumps 1
dump 7 / 2 // Dumps 3

// Modulo (%) - https://en.wikipedia.org/wiki/Modulo
dump 3 % 2  // Dumps 1
dump 13 % 6 // Dumps 1

// Power (**)
dump 2 ** 3 // Dumps 8
dump 2 ** 5 // Dumps 32
dump 3 ** 2 // Dumps 9

// BitAnd (&)
dump 170 & 219 // Dumps    138 
               // In binary: 10101010 & 11011011 = 10001010

// BitOr (|)
dump 170 | 219 // Dumps 251

// BitXor(^)
dump 170 ^ 219 // Dumps 113

// LeftShift(<<)
dump 1 << 3 // Dumps 8
            // In binary: 0b1 << 3 = 0b1000

// LeftShift(>>)
dump 8 >> 3 // Dumps 1
            // In binary: 0b1000 >> 3 = 0b1

// BinaryNot(~)
dump ~7 // Dumps 0
        // In binary: ~111 = 000 = 0

// Equals(==) - Dumps if an object is equal to an object
dump 2 == 2 // Dumps True
dump 2 + 2 == 5 // Dumps False
dump "Hello" == "Hello" // Dumps True

// Equals(!=) - Dumps if an object is not equal to an object
dump 2 != 2 // Dumps False
dump 2 + 2 != 5 // Dumps True
dump "Hello" != "Hello" // Dumps False

// Less(<) - Dumps if a number is less than a number
dump 2 < 2 // Dumps False
dump 3 < 5 // Dumps True

// LessOrEqual(<=) - Dumps if a number is less or equal to a number
dump 2 <= 2 // Dumps True
dump 3 <= 5 // Dumps True

// More(>) - Dumps if a number is more than a number
dump 2 > 2 // Dumps False
dump 5 > 3 // Dumps True

// MoreOrEqual(>=) - Dumps if a number is more or equal to a number
dump 2 >= 2 // Dumps True
dump 5 >= 3 // Dumps True

// TODO: Operation assigments (Ex. +=, -=, *=, &=, etc.)

// Enable builtin functions
#enable builtins

// List of builtin functions

// count - Counts the element of an array-like
dump count(Tgames)

// string_to_int - Converts a string to an integer. May throw error
dump string_to_int("64") // Dumps 64
dump string_to_int(64) // Errors
dump string_to_int("64i") // Errors

// sqrt - Dumps a square root of an integer. May throw error if input is negative or isn't an integer. 
// As floats don't exist in ice1h it always rounds to the nearest integer
// pseudo code would something like this

/*
function int_square_root(number: int) -> int {
    return round(square_root(number));
}
*/

dump sqrt(4) // Dumps 2
dump sqrt(9) // Dumps 3
dump sqrt(8) // ROUNDED UP - Dumps 3
dump sqrt(2) // ROUNDED DOWN - Dumps 1

// sum - Sums all of the elements of an array-like. May throw error if array-like doesn't contain integers
dump sum([game.ply_count for game in games])

// sha256 - Generates a sha256 hash of an object. May throw error if input is unhashable (Ex. Builtins)
dump sha256(games)
dump sha256(64)
dump sha256(sha256) // Errors
dump sha256("Hello")
// ..., etc.

// toLower - Applies to only strings and chars. Transforms the charachter(s) into lowercase
dump toLower('A') // Dumps 'a'
dump toLower("EvEnT") // Dumps "event"
dump toLower(123) // Errors

// toUpper - Applies to only strings and chars. Transforms the charachter(s) into uppercase
dump toLower('a') // Dumps 'A'
dump toLower("EvEnT") // Dumps "event"
dump toLower(123) // Errors

// rand - Generates a random number through the given constrains
dump rand(-1, 1) // Generates a number through the range -1 and 1
dump rand(-10, 10) // Generates a number through the range -10 and 10